/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Fri Aug  8 22:54:08 2025


#ifndef LLAMAGPT_PARAMSPARSER_H
#define LLAMAGPT_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class LlamaGPT.
*
* These are the used parameters:
* | Group name | Parameter name | Type   | Units | Default Value | Required | Description                            | Notes                |
* |:----------:|:--------------:|:------:|:-----:|:-------------:|:--------:|:--------------------------------------:|:--------------------:|
* | -          | model          | string | -     | -             | 0        | model directory                        | -                    |
* | -          | ngl            | int    | -     | 99            | 0        | number of layers to offload to the GPU | -                    |
* | -          | tokens         | int    | -     | 32            | 0        | number of tokens to predict            | -                    |
* | -          | prompt         | string | -     | -             | 0        | prompt to generate text from           | overrides promptFile |
* | -          | promptFile     | string | -     | -             | 0        | file containing the prompt             | -                    |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device LlamaGPT --model <optional_value> --ngl 99 --tokens 32 --prompt <optional_value> --promptFile <optional_value>
* \endcode
*
* \code{.unparsed}
* yarpdev --device LlamaGPT
* \endcode
*
*/

class LlamaGPT_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    LlamaGPT_ParamsParser();
    ~LlamaGPT_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"LlamaGPT"};
    const std::string m_device_name = {"LlamaGPT"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    const std::string m_model_defaultValue = {""};
    const std::string m_ngl_defaultValue = {"99"};
    const std::string m_tokens_defaultValue = {"32"};
    const std::string m_prompt_defaultValue = {""};
    const std::string m_promptFile_defaultValue = {""};

    std::string m_model = {}; //This default value of this string is an empty string. It is highly recommended to provide a suggested value also for optional string parameters.
    int m_ngl = {99};
    int m_tokens = {32};
    std::string m_prompt = {}; //This default value of this string is an empty string. It is highly recommended to provide a suggested value also for optional string parameters.
    std::string m_promptFile = {}; //This default value of this string is an empty string. It is highly recommended to provide a suggested value also for optional string parameters.

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
};

#endif
