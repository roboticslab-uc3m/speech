/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Wed Jul 30 16:11:19 2025


#ifndef PIPERSYNTHESIZER_PARAMSPARSER_H
#define PIPERSYNTHESIZER_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class PiperSynthesizer.
*
* These are the used parameters:
* | Group name | Parameter name  | Type   | Units | Default Value | Required | Description                      | Notes                             |
* |:----------:|:---------------:|:------:|:-----:|:-------------:|:--------:|:--------------------------------:|:---------------------------------:|
* | -          | modelPath       | string | -     | -             | 0        | path to .onnx voice file         | -                                 |
* | -          | modelConfigPath | string | -     | -             | 0        | path to JSON voice config file   | -                                 |
* | -          | eSpeakDataPath  | string | -     | -             | 0        | path to espeak-ng data directory | -                                 |
* | -          | speakerId       | int    | -     | 0             | 0        | id of speaker                    | -                                 |
* | -          | noiseScale      | float  | -     | 0.667         | 0        | generator noise                  | -                                 |
* | -          | lengthScale     | float  | -     | 1             | 0        | phoneme length                   | 1: normal, <1: faster, >1: slower |
* | -          | noiseW          | float  | -     | 0.8           | 0        | phoneme width noise              | -                                 |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device PiperSynthesizer --modelPath <optional_value> --modelConfigPath <optional_value> --eSpeakDataPath <optional_value> --speakerId 0 --noiseScale 0.667 --lengthScale 1 --noiseW 0.8
* \endcode
*
* \code{.unparsed}
* yarpdev --device PiperSynthesizer
* \endcode
*
*/

class PiperSynthesizer_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    PiperSynthesizer_ParamsParser();
    ~PiperSynthesizer_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"PiperSynthesizer"};
    const std::string m_device_name = {"PiperSynthesizer"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    const std::string m_modelPath_defaultValue = {""};
    const std::string m_modelConfigPath_defaultValue = {""};
    const std::string m_eSpeakDataPath_defaultValue = {""};
    const std::string m_speakerId_defaultValue = {"0"};
    const std::string m_noiseScale_defaultValue = {"0.667"};
    const std::string m_lengthScale_defaultValue = {"1"};
    const std::string m_noiseW_defaultValue = {"0.8"};

    std::string m_modelPath = {}; //This default value of this string is an empty string. It is highly recommended to provide a suggested value also for optional string parameters.
    std::string m_modelConfigPath = {}; //This default value of this string is an empty string. It is highly recommended to provide a suggested value also for optional string parameters.
    std::string m_eSpeakDataPath = {}; //This default value of this string is an empty string. It is highly recommended to provide a suggested value also for optional string parameters.
    int m_speakerId = {0};
    float m_noiseScale = {0.667};
    float m_lengthScale = {1};
    float m_noiseW = {0.8};

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
};

#endif
