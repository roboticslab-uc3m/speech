/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Thu Jul 31 11:53:09 2025


#include "PiperSynthesizer_ParamsParser.h"
#include <yarp/os/LogStream.h>
#include <yarp/os/Value.h>

namespace {
    YARP_LOG_COMPONENT(PiperSynthesizerParamsCOMPONENT, "yarp.device.PiperSynthesizer")
}


PiperSynthesizer_ParamsParser::PiperSynthesizer_ParamsParser()
{
}


std::vector<std::string> PiperSynthesizer_ParamsParser::getListOfParams() const
{
    std::vector<std::string> params;
    params.push_back("model");
    params.push_back("modelConfig");
    params.push_back("eSpeakDataDir");
    params.push_back("speakerId");
    params.push_back("noiseScale");
    params.push_back("lengthScale");
    params.push_back("noiseW");
    return params;
}


bool      PiperSynthesizer_ParamsParser::parseParams(const yarp::os::Searchable & config)
{
    //Check for --help option
    if (config.check("help"))
    {
        yCInfo(PiperSynthesizerParamsCOMPONENT) << getDocumentationOfDeviceParams();
    }

    std::string config_string = config.toString();
    yarp::os::Property prop_check(config_string.c_str());
    //Parser of parameter model
    {
        if (config.check("model"))
        {
            m_model = config.find("model").asString();
            yCInfo(PiperSynthesizerParamsCOMPONENT) << "Parameter 'model' using value:" << m_model;
        }
        else
        {
            yCInfo(PiperSynthesizerParamsCOMPONENT) << "Parameter 'model' using DEFAULT value:" << m_model;
        }
        prop_check.unput("model");
    }

    //Parser of parameter modelConfig
    {
        if (config.check("modelConfig"))
        {
            m_modelConfig = config.find("modelConfig").asString();
            yCInfo(PiperSynthesizerParamsCOMPONENT) << "Parameter 'modelConfig' using value:" << m_modelConfig;
        }
        else
        {
            yCInfo(PiperSynthesizerParamsCOMPONENT) << "Parameter 'modelConfig' using DEFAULT value:" << m_modelConfig;
        }
        prop_check.unput("modelConfig");
    }

    //Parser of parameter eSpeakDataDir
    {
        if (config.check("eSpeakDataDir"))
        {
            m_eSpeakDataDir = config.find("eSpeakDataDir").asString();
            yCInfo(PiperSynthesizerParamsCOMPONENT) << "Parameter 'eSpeakDataDir' using value:" << m_eSpeakDataDir;
        }
        else
        {
            yCInfo(PiperSynthesizerParamsCOMPONENT) << "Parameter 'eSpeakDataDir' using DEFAULT value:" << m_eSpeakDataDir;
        }
        prop_check.unput("eSpeakDataDir");
    }

    //Parser of parameter speakerId
    {
        if (config.check("speakerId"))
        {
            m_speakerId = config.find("speakerId").asInt64();
            yCInfo(PiperSynthesizerParamsCOMPONENT) << "Parameter 'speakerId' using value:" << m_speakerId;
        }
        else
        {
            yCInfo(PiperSynthesizerParamsCOMPONENT) << "Parameter 'speakerId' using DEFAULT value:" << m_speakerId;
        }
        prop_check.unput("speakerId");
    }

    //Parser of parameter noiseScale
    {
        if (config.check("noiseScale"))
        {
            m_noiseScale = config.find("noiseScale").asFloat32();
            yCInfo(PiperSynthesizerParamsCOMPONENT) << "Parameter 'noiseScale' using value:" << m_noiseScale;
        }
        else
        {
            yCInfo(PiperSynthesizerParamsCOMPONENT) << "Parameter 'noiseScale' using DEFAULT value:" << m_noiseScale;
        }
        prop_check.unput("noiseScale");
    }

    //Parser of parameter lengthScale
    {
        if (config.check("lengthScale"))
        {
            m_lengthScale = config.find("lengthScale").asFloat32();
            yCInfo(PiperSynthesizerParamsCOMPONENT) << "Parameter 'lengthScale' using value:" << m_lengthScale;
        }
        else
        {
            yCInfo(PiperSynthesizerParamsCOMPONENT) << "Parameter 'lengthScale' using DEFAULT value:" << m_lengthScale;
        }
        prop_check.unput("lengthScale");
    }

    //Parser of parameter noiseW
    {
        if (config.check("noiseW"))
        {
            m_noiseW = config.find("noiseW").asFloat32();
            yCInfo(PiperSynthesizerParamsCOMPONENT) << "Parameter 'noiseW' using value:" << m_noiseW;
        }
        else
        {
            yCInfo(PiperSynthesizerParamsCOMPONENT) << "Parameter 'noiseW' using DEFAULT value:" << m_noiseW;
        }
        prop_check.unput("noiseW");
    }

    /*
    //This code check if the user set some parameter which are not check by the parser
    //If the parser is set in strict mode, this will generate an error
    if (prop_check.size() > 0)
    {
        bool extra_params_found = false;
        for (auto it=prop_check.begin(); it!=prop_check.end(); it++)
        {
            if (m_parser_is_strict)
            {
                yCError(PiperSynthesizerParamsCOMPONENT) << "User asking for parameter: "<<it->name <<" which is unknown to this parser!";
                extra_params_found = true;
            }
            else
            {
                yCWarning(PiperSynthesizerParamsCOMPONENT) << "User asking for parameter: "<< it->name <<" which is unknown to this parser!";
            }
        }

       if (m_parser_is_strict && extra_params_found)
       {
           return false;
       }
    }
    */
    return true;
}


std::string      PiperSynthesizer_ParamsParser::getDocumentationOfDeviceParams() const
{
    std::string doc;
    doc = doc + std::string("\n=============================================\n");
    doc = doc + std::string("This is the help for device: PiperSynthesizer\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("This is the list of the parameters accepted by the device:\n");
    doc = doc + std::string("'model': ONNX voice file\n");
    doc = doc + std::string("'modelConfig': JSON voice config file\n");
    doc = doc + std::string("'eSpeakDataDir': espeak-ng data directory\n");
    doc = doc + std::string("'speakerId': id of speaker\n");
    doc = doc + std::string("'noiseScale': generator noise\n");
    doc = doc + std::string("'lengthScale': phoneme length\n");
    doc = doc + std::string("'noiseW': phoneme width noise\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("Here are some examples of invocation command with yarpdev, with all params:\n");
    doc = doc + " yarpdev --device PiperSynthesizer --model <optional_value> --modelConfig <optional_value> --eSpeakDataDir <optional_value> --speakerId 0 --noiseScale 0.667 --lengthScale 1 --noiseW 0.8\n";
    doc = doc + std::string("Using only mandatory params:\n");
    doc = doc + " yarpdev --device PiperSynthesizer\n";
    doc = doc + std::string("=============================================\n\n");    return doc;
}
